# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
      name: MyHostedVM

steps:

- script: |
    echo Sample script
    echo See https://aka.ms/yaml


- task: AzureKeyVault@2
  
  inputs:
    azureSubscription: 'ServicePrincipalForKeyVault'
    KeyVaultName: 'kube-migrate-creds'
    SecretsFilter: '*'
    RunAsPreJob: true

- task: DockerCompose@0
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: 'Microsoft Azure Enterprise (83cc3e46-0000-4be1-a33f-f757490dcebc)'
    azureContainerRegistry: '{"loginServer":"infykubedemo.azurecr.io", "id" : "/subscriptions/83cc3e46-0000-4be1-a33f-f757490dcebc/resourceGroups/InfyKubeDemo/providers/Microsoft.ContainerRegistry/registries/infykubedemo"}'
    dockerComposeFile: '**/docker-compose.yaml'
    dockerComposeFileArgs: 'TAG=$(TAG)'
    action: 'Run a Docker Compose command'
    dockerComposeCommand: 'build'

- task: CmdLine@2
  displayName: Trivy Scanning for API
  inputs:
    script:       
      echo 'checking for HIGH , CRITICAL for API'
      trivy image --exit-code 0 --severity HIGH,CRITICAL $(REGISTRY_NAME)/$(IMAGE_REPOSITORY_API):$(TAG)      
 
- task: CmdLine@2
  displayName: Trivy Scanning for FE
  inputs:
    script:       
      echo 'checking for HIGH , CRITICAL for FE'
      trivy image --exit-code 0 --severity HIGH,CRITICAL $(REGISTRY_NAME)/$(IMAGE_REPOSITORY_CLIENT):$(TAG)

- task: DockerCompose@0
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: 'ServicePrincipalForKeyVault'
    azureContainerRegistry: '{"loginServer":"infykubedemo.azurecr.io", "id" : "/subscriptions/83cc3e46-0000-4be1-a33f-f757490dcebc/resourceGroups/InfyKubeDemo/providers/Microsoft.ContainerRegistry/registries/infykubedemo"}'
    dockerComposeFile: '**/docker-compose.yaml'
    dockerComposeFileArgs: 'TAG=$(TAG)'
    action: 'Run a Docker Compose command'
    dockerComposeCommand: 'push'


- script: |
    echo docker images
    echo See https://aka.ms/yaml

- task: CopyFiles@2
  inputs:
    SourceFolder: 'helm-charts'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    CleanTargetFolder: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'helmartifact'
    publishLocation: 'Container'